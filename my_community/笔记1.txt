1.解决问题的方法很多，其中有三个工具非常的有效，着重提一下：
    Django报错页面：就是上面出现的那个黄黄的报错页面啦。Django报错页面在大多数情况下都能准确的判断错误类型、错误抛出的位置、甚至是解决方案。读者千万不要觉得读这么多英文好麻烦啊，其实重点就那么几句话。

    浏览器控制台：如果你用的浏览器是Chrome，那么打开控制台的快捷键是Ctrl + Shift + i。控制台里又有两个子页面很常用：Elements这里列出整个网页源码，可以在这里查看css样式的继承情况、容器的相互关系，甚至可以动态修改源码查看效果。Console类似运行Django的命令行。如果浏览器运行网页时遇到故障（比如404 未找到资源、403 服务器通讯失败、500 服务器内部错误），都会在这里提示。以后还可以在JavaScript代码中用console.log()指令将感兴趣的内容打印到Console中查看。非常非常有用。

    print()：很多读者在写纯Python代码时知道用print()来查找bug，到Django中反而不会了。其实Django也是一样的，在视图函数中写的print()会打印到命令行中。

    依靠这三个工具，基本上就能给出90%以上的错误信息了。接下来就是把错误的关键词放到Google、Bing这些地方去搜索答案了。

2.当我们通过url访问list.html时，顶部的{% extends "base.html" %}
    告诉Django：“这个文件是继承base.html的，你去调用它吧。

    article_detail(request, id)函数中多了id这个参数。注意我们在写model的时候并没有写叫做id的 字段，这是Django自动生成的用于索引数据表的主键（Primary Key，即pk）。有了它才有办法知道到 底应该取出哪篇文章。 ArticlePost.objects.get(id=id)意思是在所有文章中，取出id值相符合的唯一的一篇文章。

    <int:id>：Django2.0的path新语法用尖括号<>定义需要传递的参数。这里需要传递名叫id的整数到视图函 数中去。 老版本的Django是没有path语法的。

3.{% url '...' %}是Django规定的模板解耦语法，用它可以根据我们在urls.py中设置的名字，反向解析到对应的url中去。
    安装markdown也很简单：进入虚拟环境，输入指令pip install markdown即可。

    将Markdown语法书写的文章渲染为HTML文本，首先改写article/views.py的article_detail()：


    代码中markdown.markdown语法接收两个参数：第一个参数是需要渲染的文章正文article.body；第二个参数 载入了常用的语法扩展，markdown.extensions.extra中包括了缩写、表格等扩展， markdown.extensions.codehilite则是后面要使用的代码高亮扩展。# 在 article.body 后加上 |safe 过滤器。
    Django出于安全的考虑，会将输出的HTML代码进行转义，这使得article.body中渲染的HTML文本无法正 常显示。管道符|是Django中过滤器的写法，而|safe就类似给article.body贴了一个标签，表示这一段字符 不需要进行转义了。

4.代码高亮
    在static目录中新建一个目录md_css/，一会儿放置代码高亮的样式文件。 重新打开一个命令行窗口，进入虚拟环境，安装Pygments：pip install Pygments Pygments是一种通用语法高亮显示器，可以帮助我们自动生成美化代码块的样式文件。 在命令行中进入刚才新建的md_css目录中，输入Pygments指令：
        pygmentize -S monokai -f html -a .codehilite > monokai.css
    这里有一点需要注意, 生成命令中的 -a 参数需要与真实页面中的 CSS Selector 相对应，即.codehilite这个 字段在有些版本中应写为.highlight。如果后面的代码高亮无效，很可能是这里出了问题。
    回车后检查一下，在md_css目录中是否自动生成了一个叫monokai.css的文件，这是一个深色背景的高亮样 式文件。

    Monokai这个深色的样式外，Pygments还内置了很多其他的样式，地址：https://github.com/richleland/pygments-css

5.发表新文章，在ArticlePost模型中，created和updated字段为自动生成，不需要填入；author字段暂时固
    定为id=1的管理员用户，也不用填入；剩下的title和body就是表单
    需要填入的内容了。

    commit=False暂时不提交到数据库


6.功能已经实现了，但是还有个小问题没有解决：
    万一我只是不小心点到了链接，辛辛苦苦写的文章就被删除了，岂不是欲哭无泪了
    ？出现一个弹窗，确认后再进行删除，确保用户不是误操作的。弹窗是很常用的功能，但是想写出一个美观好用的弹窗却不容易。幸运的是我们不需要重复造轮子，早就有革命先驱做好相关的功能了，这里我们选择使用Layer弹窗组件。
    layer插件依赖jquery才能正常工作，因此要在jquery的后面引入layer。

    删除文章功能实现起来没什么难度，但是请注意，上面的方法是有隐患的。要继续深入探讨，就得提到跨域请求伪造攻击，也称为CSRF攻击了（Cross-site request forgery）。

    所以这里如何防范CSRF攻击的风险呢？方法是有的，即删除文章时用POST方法，并且校验csrf令牌。

    前面我们讲到在 Django 中提交表单必须加csrf_token，这个就是CSRF令牌了，它防范CSRF攻击的流程如下：

    当用户访问 django 站点时，django 反馈给用户的表单中有一个隐含字段 csrf_token，这个值是在服务器端随机生成的，每次都不一样；
    在后端处理 POST 请求前，django 会校验请求的 cookie 里的 csrf_token 和表单里的 csrf_token 是否一致。一致则请求合法，否则这个请求可能是来自于 CSRF攻击，返回 403 服务器禁止访问。
    由于攻击者并不能得到用户的 cookie 内容（仅仅是靠浏览器转发），所以通常情况下是无法构造出正确的 csrf_token 的，从而防范了此类攻击。原理就是这样，下面来看看如何实现安全的删除功能。

    可能你要问了，没发现哪行代码校验了csrf令牌啊？放心，默认配置下所有的 POST 请求都由 Django 中间件帮你验证了。另外视图一定要限制为 POST 请求，即if request.method == 'POST'必须有，就请读者思考一下原因吧。

    更新的视图与创建文章非常相似，但又有点小区别：

    文章的 id 作为参数传递进来了
    用户POST提交表单时没有创建新的文章，而是在之前的文章中修改
    redirect函数没有返回文章列表，而是返回到修改后的文章页面去了，因此需要同时把文章的id也打包传递进去，这是url所规定的GET获取页面时将article对象也传递到模板中去，以便后续的调用

7.进入虚拟环境，运行startapp指令创建新的app：
    python manage.py startapp userprofile

    用户登录时，需要填写账户密码等表单数据，因此又要用到Form表单类。

    什么是session
    Session在网络应用中，称为“会话控制”，它存储特定用户会话所需的属性及配置信息。
    当用户在 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。
    Session 最常见的用法就是存储用户的登录数据。

    密码表单的type="password"，可以让输入密码的时候显示小圆点，避免有人偷窥。

8.对数据库进行操作的表单应该继承forms.ModelForm，可以自动生成模型中已有的字段。
    这里我们覆写了password字段，因为通常在注册时需要重复输入password来确保用户没有将密码输入错误，所以覆写掉它以便我们自己进行数据的验证工作。def clean_password2()中的内容便是在验证密码是否一致了。def clean_[字段]这种写法Django会自动调用，来对单个字段的数据进行验证清洗。
    覆写某字段之后，内部类class Meta中的定义对这个字段就没有效果了，所以fields不用包含password。

    需要注意：
    验证密码一致性方法不能写def clean_password()，因为如果你不定义def clean_password2()方法，会导致password2中的数据被Django判定为无效数据从而清洗掉，从而password2属性不存在。最终导致两次密码输入始终会不一致，并且很难判断出错误原因。
    从POST中取值用的data.get('password')是一种稳妥的写法，即使用户没有输入密码也不会导致程序错误而跳出。前面章节提取POST数据我们用了data['password']，这种取值方式如果data中不包含password，Django会报错。另一种防止用户不输入密码就提交的方式是在表单中插入required属性，后面会讲到。

9.@login_required是一个Python装饰器。装饰器可以在不改变某个函数内容的前提下，给这个函数添加一些功能。具体来说就是@login_required要求调用user_delete()函数时，用户必须登录；如果未登录则不执行函数，将页面重定向到/userprofile/login/地址去。

    装饰器确认用户已经登录后，允许调用user_delete()；然后需要删除的用户id通过请求传递到视图中，由if语句确认是否与登录的用户一致，成功后则退出登录并删除用户数据，返回博客列表页面。

10.重置密码：
    前面我们已经知道如何修改文章标题、正文等内容，但是密码作为验证身份的重要口令，必须以更加稳妥的方式修改。一种比较常用的方式是发送一封修改密码的邮件到用户事先绑定的邮箱里。

    业务流程分析如下：
    向用户邮箱发送包含重置密码地址的邮件。邮件的地址需要动态生成，防止不怀好意的用户从中捣乱；
    向网站用户展示一条发送邮件成功的信息；
    用户点击邮箱中的地址后，转入重置密码的页面；
    向用户展示一条重置成功的信息。

    Django这种以开发效率著称的框架，重置密码这种常用功能是不是内置了呢？答案是肯定的。事实上内置模块的流程和上面的是完全相同的，你只需要将上面4个步骤的url配置好就可以使用了。当然内置的模板很简陋，你可以覆写模板变成自己网站的风格。

    实际上Django不仅内置了密码重置，还包括登录、登出、密码修改等功能。建议读者到一定水平后多阅读Django的源码，学习其中的编程技巧。另外这部分内容Django是用类视图写的，现在阅读可能有一定困难。

    Django作为优秀的Web框架，有很多优秀的第三方库（即APP）被世界各地的程序员们打包发布在网上，免费供你使用。成功从来都是站在巨人的肩膀上的，既然已经有了“轮子”，何必要自己再造一个呢。

    用到一个叫Django-password-reset的第三方库。
    打开虚拟环境，输入指令pip install -U django-password-reset

    既然第三方库也是app，那肯定需要在/my_blog/settings.py中注册了：'password_reset',

    简单邮件传输协议 (Simple Mail Transfer Protocol, SMTP) 是在Internet传输Email的协议标准。
    SMTP是基于文本的协议。在其之上指定了一条消息的一个或多个接收者，然后消息文本会被传输。SMTP使用TCP端口25。
    SMTP是一个“推”的协议（发送邮件），它不允许从远程服务器上“拉”来消息（接收邮件）。要接收邮件，客户端必须使用POP3或IMAP。

11.扩展User模型又有不同的方法。在大多数情况下，使用模型一对一链接的方法是比较适合的。

    每个Profile模型对应唯一的一个User模型，形成了对User的外接扩展，因此你可以在Profile添加任何想要的字段。这种方法的好处是不需要对User进行任何改动，从而拥有完全自定义的数据表。模型本身没有什么新的知识，比较神奇的是用到的信号机制。
    
    这里引入的post_save就是一个内置信号，它可以在模型调用save()方法后发出信号。

    有了信号之后还需要定义接收器，告诉Django应该把信号发给谁。装饰器receiver就起到接收器的作用。每当User有更新时，就发送一个信号启动post_save相关的函数。

    通过信号的传递，实现了每当User创建/更新时，Profile也会自动的创建/更新。

    前面讲过，每次改动模型后都需要进行数据的迁移。由于avatar字段为图像字段，需要安装第三方库Pillow来支持：

    迁移好数据后，如果你试图登录用户，会得到报错。这是因为之前创建的User数据都没有对应的Profile模型，违背了现有的模型。一种解决办法就是干脆删除旧的数据，因此就需要用到Django的shell命令。

    shell是Django提供的互动解释器，你可以在这个指令模式中试验代码是否能够正确执行，是相当方便的工具。
    在虚拟环境中输入python manage.py shell就可以进入shell

    输入下面两行指令就可以轻松删除User数据库：

    >>> from django.contrib.auth.models import User
    >>> User.objects.all().delete()

    注意因为前面写的article模型中，与User的外键也采用了models.CASCADE级联删除模式，因此随着User的删除，相关的文章也一并删除了。输入exit()退出shell，输入指令python manage.py createsuperuser，重新创建管理员账户。

    注意因为前面写的article模型中，与User的外键也采用了models.CASCADE级联删除模式，因此随着User的删除，相关的文章也一并删除了。输入exit()退出shell，输入指令python manage.py createsuperuser，重新创建管理员账户。

    实际上GET方法中不需要将profile_form这个表单对象传递到模板中去，因为模板中已经用Bootstrap写好了表单，所以profile_form并没有用到。

    user_id是外键自动生成的字段，用来表征两个数据表的关联。你可以在SQLiteStudio中查看它。留意redirect()是如何携带参数传递的

    在前面新建article的章节中，由于没有用户管理的知识，存在一些问题：
    new_article.author = User.objects.get(id=1)强行把作者指定为id=1的用户，这显然是不对的。
    没有对用户的登录状态进行检查。

    前面我们已经尝试过将article配置到admin后台，方法是非常简单的，直接在admin.py中写入admin.site.register(Profile)就可以了。但是这样写会导致User、Profile是两个分开的表，不方便不说，强迫症的你怎么能受得了。
    我们希望能够在admin中将User、Profile合并为一张完整的表格。

    本章中用到了信号来实现User和Profile的同步创建，但是也产生了一个BUG：在后台中创建User时如果填写了Profile任何内容，则系统报错且保存不成功；其他情况下均正常。
    BUG产生原因：在后台中创建并保存User时调用了信号接收函数，创建了Profile表；但如果此时管理员填写了内联的Profile表，会导致此表也会被创建并保存。最终结果就是同时创建了两个具有相同User的Profile表，违背了”一对一“外键的原则。
    解决的办法也不难。因为博客项目的需求较简单，其实没有必要用到信号。

    图片属于一种媒体文件，它与静态文件类似，需要设置一个统一的目录，便于集中存储和访问。
    这类需要框架统一设置的参数，当然应该在/my_blog/settings.py中。

    MEDIA_ROOT和MEDIA_URL是用户上传文件保存、访问的位置：
    在前面的Profile中我们设置了upload_to参数。有了这个参数，文件上传后将自动保存到项目根目录的media文件夹中。 os.path.join(MEDIA_ROOT, 'media/')指定了media文件夹的位置。
    MEDIA_URL代表用户通过URL来访问这个本地地址的URL。设置好这个参数后，用户就可以通过解析url，很方便的获取文件的地址。这样做的好处是避免的硬编码，让代码更容易维护。

    upload_to指定了图片上传的位置，即/media/avatar/%Y%m%d/。%Y%m%d是日期格式化的写法，会最终格式化为系统时间。比如说图片上传是2018年12月5日，则图片会保存在/media/avatar/2018205/中。

    注意ImageField字段不会存储图片本身，而仅仅保存图片的地址。记得用pip指令安装Pillow。

12.写一个完善的分页功能是有些难度的，好在Django已经帮你准备好一个现成的分页模块了
    （Django把大部分基础功能都替你准备好了！）。内置模块虽然简单，但是对博客来说完 全足够了。

    在视图中通过Paginator类，给传递给模板的内容做了手脚：返回的不再是所有文章的集合，而是对应页码的部分文章的对象，并且这个对象还包含了分页的方法。

    我们在前面的文章已经接触过一些将参数传递到视图的手段了：
    通过POST请求将表单数据传递到视图
    通过url将地址中的参数传递到视图

    除此之外，在前面的学习中为了方便，没有做任何权限管理，以至于任何用户都可以对所有文章进行修改、删除

13.现在你已经很熟悉MTV模式，不需要我啰嗦也能完成任务：
    文章的模型已经有了，不需要写Model了
    写一个视图函数article_list_by_views()，取出按浏览排序后的文章对象
    将文章对象传递到模板，并进行渲染

    前面用过GET请求传递单个参数。它也是可以传递多个参数的，如?a=1&b=2，参数间用&隔开
    视图根据GET参数order的值，判断取出的文章如何排序
    order_by()方法指定对象如何进行排序。模型中有total_views这个整数字段，因此‘total_views’为正序，‘-total_views’为逆序
    为什么把新变量order也传递到模板中？因为文章需要翻页！order给模板一个标识，提醒模板下一页应该如何排序
    
    逻辑
    尽管细节不同，但是搜索和列表有很多类似的地方：它们都是先检索出一些文章对象，并将其展示给用户。上一章已经说过，代码重复是万恶之源，好的实践必须把功能类似的模块尽量复用起来。基于这个原则，我们打算继续在原有的article_list()上添砖加瓦，让其功能更加的强大。

    更酷的是，我们希望搜索出来的文章也能够按照时间、热度等各种方式进行排序。因此需要构造一个新的参数search，能够和之前的order参数进行联合查询。

14.GET还是POST？
    用户搜索内容时提交的文本，可以用GET请求提交，也可以用POST请求提交。根据实际的需要进行选择。
    因为order是用GET提交的，并且翻页是GET请求，因此选择GET方式提交搜索文本，可以方便地和之前的模块结合起来。
    之前我们已经用过表单组件<form method="POST">，通过POST请求提交数据。表单组件同样也可以提交GET请求，只要去掉method="POST"属性就可以了。

    Q对象
    Model.objects.all()能够返回表中的所有对象。
    对应的，Model.objects.filter(**kwargs)可以返回与给定参数匹配的部分对象。
    还有Model.objects.exclude(**kwargs)返回与给定参数不匹配的对象
    如果想对多个参数进行查询怎么办？比如同时查询文章标题和正文内容。这时候就需要Q对象。

    新增参数search，存放需要搜索的文本。若search不为空，则检索特定文章对象。

    留意filter中Q对象的用法。Q(title__icontains=search)意思是在模型的title字段查询，icontains是不区分大小写的包含，中间用两个下划线隔开。search是需要查询的文本。多个Q对象用管道符|隔开，就达到了联合查询的目的。

    icontains不区分大小写，对应的contains区分大小写

    为什么需要search = ''语句？如果用户没有搜索操作，则search = request.GET.get('search')会使得search = None，而这个值传递到模板中会错误地转换成"None"字符串！等同于用户在搜索“None”关键字，这明显是错误的。

    这种方法有一个小缺点：有的时候url中会包含像search=''（空值）这样无意义的字符串，强迫症简直不能忍。所幸这无伤大雅，通常用户并不会关心你的url是什么样子的，只要网页美观好用就行。

15.有折腾代码高亮的痛苦经历之后，设置Markdown的目录扩展就显得特别轻松了。

    注意：有读者反映某些版本下 markdown.extensions.TOC 会报错。如果遇到这种情况，请尝试修改为 markdown.extensions.toc 。

    还记得Markdown语法如何写标题吗？一级标题：# title1，二级标题：## title2
    然后你可以在文中的任何地方插入[TOC]字符串，目录就自动生成好了

    为了能将toc单独提取出来，我们先将Markdown类赋值给一个临时变量md，然后用convert()方法将正文渲染为html页面。通过md.toc将目录传递给模板。

16.评论是一个相对独立的功能，因此新建一个评论的app
    有的人觉得奇怪，没有博文就没有评论，为什么说评论是“独立”的功能？
    那是因为不仅博文可以评论，照片、视频甚至网站本身都可以“被评论”。将其封装成单独的模块方便以后的扩展。
    
    因为我们想显示发表评论的时间，修改时区设置TIME_ZONE为上海的时区。
    你必须先在setting.py中注册app，这个app中的数据迁移才能生效

    评论必须关联在某篇具体的博文里，因此传入博文的id，方便后续调用。
    post_comment()视图还没写，先取个名字占位置。

    get_object_or_404()：它和Model.objects.get()的功能基本是相同的。区别是在生产环境下，如果用户请求一个不存在的对象时，Model.objects.get()会返回Error 500（服务器内部错误），而get_object_or_404()会返回Error 404。相比之下，返回404错误更加的准确。
    redirect()：返回到一个适当的url中：即用户发送评论后，重新定向到文章详情页面。当其参数是一个Model对象时，会自动调用这个Model对象的get_absolute_url()方法。因此接下来马上修改article的模型。

    filter()可以取出多个满足条件的对象，而get()只能取出1个，注意区分使用

17.前面章节中写的所有视图都是基于函数的，即def；而类视图是基于类的，即class。
    有编程基础的同学都知道，类是面向对象技术中非常重要的概念。具有复杂数据、功能的类，可以通过继承轻而易举的将自身特性传递给另一个类，从而实现代码的高效复用。

    相比以前的函数视图，类视图有以下优势：
    HTTP方法（GET，POST等）相关的代码，可以通过方法而不是条件分支来组织
    可以通过诸如mixins（多重继承）之类的面向对象技术将代码分解为可重用组件

    理解函数视图   类视图

    从本质上讲，基于类的视图允许你使用不同的类实例方法（即上面的def get()）响应不同的HTTP请求方法，而不需要使用条件分支代码。这样做的好处是把不同的HTTP请求都分离到独立的函数中，逻辑更加清晰，并且方便复用。

    需要注意的是，因为Django的URL解析器希望将请求发送到函数而不是类，所以类视图有一个as_view()方法，该方法返回一个函数，当请求匹配关联模式的URL时，则调用该函数。

    实现文章栏目功能的方法有多种。你可以只是简单的在文章的Model中增加CharField()字段，以字符串的形式将栏目名称保存起来（实际上这种实现更像是“标签”，以后会讲到）。这样做的优点是比较简单；缺点也很明显，就是时间长了你可能会记混栏目的名字，并且也不方便对栏目的其他属性进行扩展。

    因此对文章栏目可以独立为一个Model，用外键与文章的Model关联起来。

    


    














